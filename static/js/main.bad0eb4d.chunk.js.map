{"version":3,"sources":["cards.js","wallet.js","assets/white-coin.png","assets/blue-coin.png","assets/green-coin.png","assets/red-coin.png","assets/black-coin.png","assets/wild-coin.png","utils.js","cardModal.js","board.js","bank.js","noblemen.js","player.js","returnCoinsModal.js","index.js"],"names":["Price","white","blue","green","red","black","this","CardBase","color","points","price","convertLevel","level","map","decks","Wallet","startingBalance","wild","DECK","BOARD","RESERVED","WILD","renderPrice","type","prices","Object","entries","colorPrice","elem","Coin","content","GameCard","push","props","imgSrc","classNames","onClick","disabled","join","whiteCoin","blueCoin","greenCoin","redCoin","blackCoin","wildCoin","className","Image","src","size","displayClass","selectable","calculateCharge","playerWallet","playerCards","charge","response","insufficientFunds","remainder","length","swap","A","i","j","temp","shuffle","n","k","Math","floor","random","CardModal","state","open","finished","setState","source","column","card","handleReserve","index","handleBuy","cardComponent","modalHeader","modalContent","buyButton","deck","Card","Content","Header","Grid","Row","columns","Column","textAlign","Description","Button","handleConfirm","positive","Modal","onClose","setOpen","onOpen","trigger","Actions","React","Component","Board","cards","rows","deckModal","cols","col","width","Group","itemsPerRow","Bank","coins","idx","count","handleCollectCoins","ModalPickCoins","handleCoinTake","bind","handleCoinReturn","bankCoins","tempCoins","bankCoinsSelectable","initBankCoinsSelectable","numTempCoins","obj","value","keys","colorToTake","assign","alert","setAllObjValues","tempCoinColor","colorToReturn","bankCoinButton","tempCoinButton","handleCancel","onOpenModal","NobleBase","isDisplayed","allNoblemen","Noble","Noblemen","noblemen","noble","ModalNoblemen","nobleIndex","handleNoblemenSelection","selectedNoble","selectableNoblemen","Player","coin","cardArray","activePlayer","name","ModalPlayerDetails","cardArrayFormatted","values","reserved","PurchasedCards","PlayerBase","position","ReturnCoinsModal","playerCoins","numPlayerCoins","sum","refreshState","handleReturnCoins","playerCoinButton","Game","shuffledDecks","initCards","history","Array","players","initPlayers","numPlayers","currentPlayerIdx","2","3","4","returnCoinsModalOpen","stepNumber","moveHistory","historyReversed","initNoblemen","noblemenSelectionOpen","pointsToWin","maxReserve","row","pop","slice","handleEndTurn","player","addPoints","splice","reserve","sort","a","b","playersRanked","msg","addNoble","handleWinner","handleNextTurn","rank","calculateWinner","displayRank","array","listSelectableNoblemen","any","status","moves","step","move","desc","padded","ReactDOM","render","document","getElementById"],"mappings":"kNAmGaA,G,MACX,WAAYC,EAAOC,EAAMC,EAAOC,EAAKC,GAAQ,oBAC3CC,KAAKL,MAAQA,EACbK,KAAKJ,KAAOA,EACZI,KAAKH,MAAQA,EACbG,KAAKF,IAAMA,EACXE,KAAKD,MAAQA,IAIXE,EACJ,WAAYC,EAAOC,EAAQR,EAAOC,EAAMC,EAAOC,EAAKC,GAAQ,oBAC1DC,KAAKE,MAAQA,EACbF,KAAKG,OAASA,EACdH,KAAKI,MAAQ,IAAIV,EAAMC,EAAOC,EAAMC,EAAOC,EAAKC,IAIpD,SAASM,EAAaC,GACpB,OAAOA,EAAMC,KAAI,mCAAEL,EAAF,KAASC,EAAT,KAAiBR,EAAjB,KAAwBC,EAAxB,KAA8BC,EAA9B,KAAqCC,EAArC,KAA0CC,EAA1C,YAAqD,IAAIE,EAASC,EAAOC,EAAQR,EAAOC,EAAMC,EAAOC,EAAKC,MAG7H,IAEeS,EAFH,CAACH,EAzHA,CACT,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAClB,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAClB,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAClB,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAClB,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAClB,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAClB,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAClB,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAClB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GACjB,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GACjB,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GACjB,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GACjB,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GACjB,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GACjB,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GACjB,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,KAiFcA,EA9EtB,CACT,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,GACnB,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE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","file":"static/js/main.bad0eb4d.chunk.js","sourcesContent":["var level0 = [\r\n    ['black',0,1,1,1,1,0],\r\n    ['black',0,1,2,1,1,0],\r\n    ['black',0,2,2,0,1,0],\r\n    ['black',0,0,0,1,3,1],\r\n    ['black',0,0,0,2,1,0],\r\n    ['black',0,2,0,2,0,0],\r\n    ['black',0,0,0,3,0,0],\r\n    ['black',1,0,4,0,0,0],\r\n    ['blue',0,1,0,1,1,1],\r\n    ['blue',0,1,0,1,2,1],\r\n    ['blue',0,1,0,2,2,0],\r\n    ['blue',0,0,1,3,1,0],\r\n    ['blue',0,1,0,0,0,2],\r\n    ['blue',0,0,0,2,0,2],\r\n    ['blue',0,0,0,0,0,3],\r\n    ['blue',1,0,0,0,4,0],\r\n    ['white',0,0,1,1,1,1],\r\n    ['white',0,0,1,2,1,1],\r\n    ['white',0,0,2,2,0,1],\r\n    ['white',0,3,1,0,0,1],\r\n    ['white',0,0,0,0,2,1],\r\n    ['white',0,0,2,0,0,2],\r\n    ['white',0,0,3,0,0,0],\r\n    ['white',1,0,0,4,0,0],\r\n    ['green',0,1,1,0,1,1],\r\n    ['green',0,1,1,0,1,2],\r\n    ['green',0,0,1,0,2,2],\r\n    ['green',0,1,3,1,0,0],\r\n    ['green',0,2,1,0,0,0],\r\n    ['green',0,0,2,0,2,0],\r\n    ['green',0,0,0,0,3,0],\r\n    ['green',1,0,0,0,0,4],\r\n    ['red',0,1,1,1,0,1],\r\n    ['red',0,2,1,1,0,1],\r\n    ['red',0,2,0,1,0,2],\r\n    ['red',0,1,0,0,1,3],\r\n    ['red',0,0,2,1,0,0],\r\n    ['red',0,2,0,0,2,0],\r\n    ['red',0,3,0,0,0,0],\r\n    ['red',1,4,0,0,0,0],\r\n];\r\n\r\nvar level1 = [\r\n    ['black',1,3,2,2,0,0],\r\n    ['black',1,3,0,3,0,2],\r\n    ['black',2,0,1,4,2,0],\r\n    ['black',2,0,0,5,3,0],\r\n    ['black',2,5,0,0,0,0],\r\n    ['black',3,0,0,0,0,6],\r\n    ['blue',1,0,2,2,3,0],\r\n    ['blue',1,0,2,3,0,3],\r\n    ['blue',2,5,3,0,0,0],\r\n    ['blue',2,2,0,0,1,4],\r\n    ['blue',2,0,5,0,0,0],\r\n    ['blue',3,0,6,0,0,0],\r\n    ['white',1,0,0,3,2,2],\r\n    ['white',1,2,3,0,3,0],\r\n    ['white',2,0,0,1,4,2],\r\n    ['white',2,0,0,0,5,3],\r\n    ['white',2,0,0,0,5,0],\r\n    ['white',3,6,0,0,0,0],\r\n    ['green',1,3,0,2,3,0],\r\n    ['green',1,2,3,0,0,2],\r\n    ['green',2,4,2,0,0,1],\r\n    ['green',2,0,5,3,0,0],\r\n    ['green',2,0,0,5,0,0],\r\n    ['green',3,0,0,6,0,0],\r\n    ['red',1,2,0,0,2,3],\r\n    ['red',1,0,3,0,2,3],\r\n    ['red',2,1,4,2,0,0],\r\n    ['red',2,3,0,0,0,5],\r\n    ['red',2,0,0,0,0,5],\r\n    ['red',3,0,0,0,6,0]\r\n];\r\n\r\nvar level2 = [\r\n    ['black',3,3,3,5,3,0],\r\n    ['black',4,0,0,0,7,0],\r\n    ['black',4,0,0,3,6,3],\r\n    ['black',5,0,0,0,7,3],\r\n    ['blue',3,3,0,3,3,5],\r\n    ['blue',4,7,0,0,0,0],\r\n    ['blue',4,6,3,0,0,3],\r\n    ['blue',5,7,3,0,0,0],\r\n    ['white',3,0,3,3,5,3],\r\n    ['white',4,0,0,0,0,7],\r\n    ['white',4,3,0,0,3,6],\r\n    ['white',5,3,0,0,0,7],\r\n    ['green',3,5,3,0,3,3],\r\n    ['green',4,0,7,0,0,0],\r\n    ['green',4,3,6,3,0,0],\r\n    ['green',5,0,7,3,0,0],\r\n    ['red',3,3,5,3,0,3],\r\n    ['red',4,0,0,7,0,0],\r\n    ['red',4,0,3,6,3,0],\r\n    ['red',5,0,0,7,3,0],\r\n];\r\n\r\nexport class Price {\r\n  constructor(white, blue, green, red, black) {\r\n    this.white = white;\r\n    this.blue = blue;\r\n    this.green = green;\r\n    this.red = red;\r\n    this.black = black;\r\n  }\r\n}\r\n\r\nclass CardBase {\r\n  constructor(color, points, white, blue, green, red, black) {\r\n    this.color = color;\r\n    this.points = points;\r\n    this.price = new Price(white, blue, green, red, black);\r\n  }\r\n}\r\n\r\nfunction convertLevel(level) {\r\n  return level.map(([color, points, white, blue, green, red, black]) => new CardBase(color, points, white, blue, green, red, black));\r\n}\r\n\r\nvar decks = [convertLevel(level0), convertLevel(level1), convertLevel(level2)];\r\n\r\nexport default decks;","/**\r\n * Summary. Carries coins for buying cards.\r\n *\r\n * Description. Used by PlayerBase and BankBase classes. Not used by CardBase.\r\n * If the startingBalance is set above 0, we assume this is a wallet for the \r\n * BankBase and thus set the wilds to 5.\r\n *\r\n */\r\nexport default class Wallet {\r\n  constructor(startingBalance = 0) {\r\n    this.white = startingBalance;\r\n    this.blue = startingBalance;\r\n    this.green = startingBalance;\r\n    this.red = startingBalance;\r\n    this.black = startingBalance;\r\n    this.wild = 0 < startingBalance ? 5 : 0;  // max 5 wild coins for all games\r\n  }\r\n\r\n  sum() {\r\n    return this.white + this.blue + this.green + this.red + this.black + this.wild;\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/white-coin.eb7204ef.png\";","export default __webpack_public_path__ + \"static/media/blue-coin.dd9993c7.png\";","export default __webpack_public_path__ + \"static/media/green-coin.d0135588.png\";","export default __webpack_public_path__ + \"static/media/red-coin.97467f0f.png\";","export default __webpack_public_path__ + \"static/media/black-coin.184968ab.png\";","export default __webpack_public_path__ + \"static/media/wild-coin.fcf1c1c1.png\";","import React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Image } from 'semantic-ui-react';\r\nimport Wallet from './wallet';\r\nimport whiteCoin from './assets/white-coin.png';\r\nimport blueCoin from './assets/blue-coin.png';\r\nimport greenCoin from './assets/green-coin.png';\r\nimport redCoin from './assets/red-coin.png';\r\nimport blackCoin from './assets/black-coin.png';\r\nimport wildCoin from './assets/wild-coin.png';\r\n\r\nexport const DECK = 'deck';\r\nexport const BOARD = 'board';\r\nexport const RESERVED = 'reserved';\r\nexport const WHITE = 'white';\r\nexport const BLUE = 'blue';\r\nexport const GREEN = 'green';\r\nexport const RED = 'red';\r\nexport const BLACK = 'black';\r\nexport const WILD = 'wild';\r\n\r\nexport default function renderPrice(price, type) {\r\n  let prices = [];\r\n  for (let [color, colorPrice] of Object.entries(price)) {\r\n    if (0 < colorPrice) {\r\n      let elem;\r\n      if (type === 'coin') {\r\n        elem = <Coin color={color} content={colorPrice} />;\r\n      } else if (type === 'game-card') {\r\n        elem = <GameCard color={color} content={colorPrice} />;\r\n      }\r\n      prices.push(elem);\r\n    }\r\n  }\r\n  return (prices);\r\n}\r\n\r\nexport function Coin(props) {\r\n  let displayClass;\r\n  if (props.onClick && !props.disabled) {\r\n    displayClass = \"selectable\";\r\n  } else if (props.onClick && props.disabled) {\r\n    displayClass = \"disabled\";\r\n  } else {\r\n    displayClass = \"\";\r\n  }\r\n  const classNames = [\"coinContainer\", displayClass].join(\" \");\r\n  let imgSrc;\r\n  if (props.color === WHITE) {\r\n    imgSrc = whiteCoin;\r\n  } else if (props.color === BLUE) {\r\n    imgSrc = blueCoin;\r\n  } else if (props.color === GREEN) {\r\n    imgSrc = greenCoin;\r\n  } else if (props.color === RED) {\r\n    imgSrc = redCoin;\r\n  } else if (props.color === BLACK) {\r\n    imgSrc = blackCoin;\r\n  } else if (props.color === WILD) {\r\n    imgSrc = wildCoin;\r\n  } else {\r\n    imgSrc = null;\r\n  }\r\n  return (\r\n    <div\r\n      className={classNames}\r\n      onClick={() => {props.onClick && !props.disabled ? props.onClick(props.color) : void(0)}}\r\n    >\r\n      <Image src={imgSrc} size='mini' />\r\n      <div className='coinContent'>{props.content}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function GameCard(props) {\r\n  let displayClass;\r\n  if (props.selectable === true) {\r\n    displayClass = \"selectable\";\r\n  } else {\r\n    displayClass = \"\";\r\n  }\r\n  const classNames = [\"game-card\", props.size || \"mini\", props.color, displayClass].join(\" \");\r\n  return (\r\n    <div\r\n      className={classNames}\r\n    >\r\n      {props.content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function calculateCharge(price, playerWallet, playerCards) {\r\n  let charge = new Wallet();\r\n  let response = {\r\n    insufficientFunds: null,\r\n    charge: charge,\r\n  }\r\n  for (let [color, colorPrice] of Object.entries(price)) {\r\n    let remainder = colorPrice - playerCards[color].length;\r\n    if (playerWallet[color] + playerWallet[WILD] < remainder) {\r\n      response.insufficientFunds = true;\r\n      return response;\r\n    } else if (playerWallet[color] < remainder) {\r\n      charge[color] = playerWallet[color];\r\n      charge[WILD] += remainder - playerWallet[color];\r\n    } else {\r\n      charge[color] = remainder;\r\n    }\r\n    if (playerWallet[WILD] - charge[WILD] < 0) {\r\n      response.insufficientFunds = true;\r\n      return response;\r\n    }\r\n  }\r\n  response.insufficientFunds = false;\r\n  return response;\r\n}\r\n\r\nfunction randInt(i, j) {\r\n  return Math.floor(Math.random() * (j - i) + i);\r\n}\r\n\r\nfunction swap(A, i, j) {\r\n  let temp = A[i];\r\n  A[i] = A[j];\r\n  A[j] = temp;\r\n}\r\n\r\nexport function shuffle(A) {\r\n  let n = A.length;\r\n  for (let k = 0; k < n; k++) {\r\n    swap(A, k, randInt(0, n - 1));\r\n  }\r\n  return A;\r\n}","import React from 'react';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Grid, Card, Modal, Button } from 'semantic-ui-react';\r\nimport renderPrice, { BOARD, calculateCharge, RESERVED, DECK, GameCard } from './utils';\r\nimport { Coin } from './utils';\r\n\r\nexport default class CardModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n    };\r\n  }\r\n  \r\n  setOpen(open) {\r\n    if (!this.props.finished) {\r\n      this.setState({open: open});\r\n    }\r\n  }\r\n  \r\n  handleReserve(source, level, column, card) {\r\n    this.setState({open: false});\r\n    this.props.handleReserve(source, level, column, card); //assume props is okay, don't need to use state\r\n  }\r\n  \r\n  handleConfirm(source, level, column, index, card) {\r\n    this.setState({open: false});\r\n    this.props.handleBuy(source, level, column, index, card); //assume props is okay, don't need to use state\r\n  }\r\n  \r\n  render() {\r\n    let { source, level, column, index, card, playerWallet, playerCards, deck } = this.props;\r\n    let color;\r\n    let cardComponent;\r\n    let modalHeader;\r\n    let modalContent;\r\n    let buyButton;\r\n    if (source === BOARD || source === RESERVED) {\r\n      if (typeof card === \"undefined\") {\r\n        cardComponent = <Card />;\r\n      } else {\r\n        color = card.color;\r\n        let points = card.points;\r\n        let price = card.price;\r\n        const prices = renderPrice(price, \"coin\");\r\n        cardComponent = (\r\n          <Card>\r\n            <Card.Content className={color}>\r\n              <Card.Header>\r\n                <Grid>\r\n                  <Grid.Row columns={2}>\r\n                    <Grid.Column><Coin color={color} /></Grid.Column>\r\n                    <Grid.Column textAlign=\"right\">{points}</Grid.Column>\r\n                  </Grid.Row>\r\n                </Grid>\r\n              </Card.Header>\r\n              <Card.Description>\r\n                {prices}\r\n              </Card.Description>\r\n            </Card.Content>\r\n          </Card>\r\n        );\r\n        // TODO: BUG: you can buy another player's reserved card.\r\n        const insufficientFunds = calculateCharge(price, playerWallet, playerCards).insufficientFunds;\r\n        modalHeader = (\r\n          <Grid>\r\n            <Grid.Row columns={2}>\r\n              <Grid.Column><Coin color={color} size='mini' /></Grid.Column>\r\n              <Grid.Column textAlign=\"right\">{points}</Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        );\r\n        modalContent = prices;\r\n        buyButton = (\r\n          <Button\r\n            content=\"Buy\"\r\n            disabled={insufficientFunds}\r\n            onClick={() => this.handleConfirm(source, level, column, index, card)}\r\n            positive\r\n          />\r\n        );\r\n      }\r\n    } else if (source === DECK) {\r\n      color = 'beige';\r\n      card = deck[deck.length - 1];\r\n      const selectable = 0 < deck.length ? 'selectable' : 'disabled';\r\n      cardComponent = (\r\n        <div className={[\"game-card\", \"mini\", selectable, color].join(\" \")}>\r\n          <Grid.Row>...</Grid.Row>\r\n          <Grid.Row>{deck.length}</Grid.Row>\r\n        </div>\r\n      );\r\n      modalHeader = `Level ${level}`;\r\n      modalContent = `Remaining: ${deck.length}`;\r\n      column = null;\r\n    }\r\n    return (\r\n      <Modal\r\n        onClose={() => this.setOpen(false)}\r\n        onOpen={() => this.setOpen(true)}\r\n        open={this.state.open}\r\n        trigger={cardComponent}\r\n      >\r\n        <Modal.Header>{modalHeader}</Modal.Header>\r\n        <Modal.Content>{modalContent}</Modal.Content>\r\n        <Modal.Actions>\r\n          <Button \r\n            color='black'\r\n            content=\"Cancel\"\r\n            onClick={() => this.setOpen(false)}\r\n          />\r\n          <Button\r\n            color='yellow'\r\n            content=\"Reserve\"\r\n            disabled={source === RESERVED}\r\n            onClick={() => this.handleReserve(source, level, column, card)}\r\n          />\r\n          {buyButton}\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Grid, Card } from 'semantic-ui-react';\r\nimport CardModal from './cardModal';\r\nimport { DECK, BOARD } from './utils';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let cards = this.props.cards;\r\n    let rows = [];\r\n    for (let level = 0; level < 3; level++) {\r\n      let deck = this.props.decks[level];\r\n      let deckModal = (\r\n        <CardModal\r\n          source={DECK}\r\n          level={level}\r\n          deck={deck}\r\n          handleReserve={this.props.handleReserve}\r\n          finished={this.props.finished}\r\n        />\r\n      );\r\n      let cols = [];\r\n      for (let col = 0; col < 4; col++) {\r\n        let card = cards[level][col];\r\n        cols.push(\r\n          <CardModal \r\n            source={BOARD}\r\n            level={level}\r\n            column={col}\r\n            card={card}\r\n            playerWallet={this.props.playerWallet}\r\n            playerCards={this.props.playerCards}\r\n            handleBuy={this.props.handleBuy}\r\n            handleReserve={this.props.handleReserve}\r\n            finished={this.props.finished}\r\n          />\r\n        );\r\n      }\r\n      rows.push(\r\n        <Grid.Row columns={2}>\r\n          <Grid.Column width={1}>\r\n            {deckModal}\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <Card.Group itemsPerRow={4}>\r\n              {cols}\r\n            </Card.Group>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      );\r\n    }\r\n    return (\r\n      <Grid>{rows}</Grid>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Wallet from './wallet';\r\nimport { Coin, WILD } from './utils';\r\nimport { Button, Grid, Modal } from 'semantic-ui-react'\r\n\r\nexport default class Bank extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const coins = Object.entries(this.props.coins).map(([color, count], idx) => {\r\n      return (\r\n        <Grid.Row>\r\n          <Coin color={color} content={count}/>\r\n        </Grid.Row>\r\n      );\r\n    });\r\n    return (\r\n      <Grid.Column>\r\n        {coins}\r\n        <Grid.Row>\r\n          <ModalPickCoins \r\n            coins={this.props.coins}\r\n            handleCollectCoins={this.props.handleCollectCoins}\r\n            finished={this.props.finished}\r\n          />\r\n        </Grid.Row>\r\n      </Grid.Column>\r\n    );\r\n  }\r\n}\r\n\r\nclass ModalPickCoins extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCoinTake = this.handleCoinTake.bind(this);\r\n    this.handleCoinReturn = this.handleCoinReturn.bind(this);\r\n    this.state = {\r\n      open: false,\r\n      bankCoins: props.coins,\r\n      tempCoins: new Wallet(),\r\n      bankCoinsSelectable: this.initBankCoinsSelectable(props.coins),\r\n      numTempCoins: 0,\r\n      handleCollectCoins: props.handleCollectCoins,\r\n    };\r\n  }\r\n\r\n  initBankCoinsSelectable(coins) {\r\n    let bankCoinsSelectable = {};\r\n    for (let [color, count] of Object.entries(coins)) {\r\n      if (color !== WILD) {\r\n        bankCoinsSelectable[color] = 0 < count;\r\n      }\r\n    }\r\n    return bankCoinsSelectable;\r\n  }\r\n\r\n  onOpenModal() {\r\n    if (!this.props.finished) {\r\n      this.setState({\r\n        open: true,\r\n        bankCoins: this.props.coins,\r\n        numTempCoins: 0,\r\n        bankCoinsSelectable: this.initBankCoinsSelectable(this.props.coins),\r\n      });\r\n    }\r\n  }\r\n\r\n  setAllObjValues(obj, value) {\r\n    for (let key of Object.keys(obj)) {\r\n      obj[key] = value;\r\n    }\r\n  }\r\n\r\n  handleCoinTake(colorToTake) {\r\n    let bankCoins = Object.assign({}, this.state.bankCoins);\r\n    let tempCoins = Object.assign({}, this.state.tempCoins);\r\n    let numTempCoins = this.state.numTempCoins;\r\n    let bankCoinsSelectable = Object.assign({}, this.state.bankCoinsSelectable);\r\n    bankCoins[colorToTake]--;\r\n    tempCoins[colorToTake]++;\r\n    numTempCoins++;\r\n    if (numTempCoins === 0) {\r\n      alert(\"Why was it negative\");\r\n    } else if (numTempCoins === 1) {\r\n      if (bankCoins[colorToTake] < 3) {\r\n        bankCoinsSelectable[colorToTake] = false;\r\n      } else {\r\n        bankCoinsSelectable[colorToTake] = 0 < bankCoins[colorToTake];\r\n      }\r\n    } else if (numTempCoins === 2) {\r\n      if (1 < tempCoins[colorToTake]) {\r\n        this.setAllObjValues(bankCoinsSelectable, false);\r\n      } else {\r\n        for (let tempCoinColor of Object.keys(tempCoins)) {\r\n          if (0 < tempCoins[tempCoinColor]) {\r\n            bankCoinsSelectable[tempCoinColor] = false;\r\n          }\r\n        }\r\n        bankCoinsSelectable[colorToTake] = false;\r\n      }\r\n    } else if (2 < numTempCoins) {\r\n      this.setAllObjValues(bankCoinsSelectable, false);\r\n    }\r\n    this.setState({\r\n      bankCoins: bankCoins,\r\n      tempCoins: tempCoins,\r\n      numTempCoins: numTempCoins,\r\n      bankCoinsSelectable: bankCoinsSelectable,\r\n    });\r\n  }\r\n\r\n  handleCoinReturn(colorToReturn) {\r\n    let bankCoins = Object.assign({}, this.state.bankCoins);\r\n    let tempCoins = Object.assign({}, this.state.tempCoins);\r\n    let numTempCoins = this.state.numTempCoins;\r\n    let bankCoinsSelectable = Object.assign({}, this.state.bankCoinsSelectable);\r\n    bankCoins[colorToReturn]++;\r\n    tempCoins[colorToReturn]--;\r\n    numTempCoins--;\r\n    if (numTempCoins < 2) {\r\n      this.setAllObjValues(bankCoinsSelectable, true);\r\n    } else if (numTempCoins === 2) {\r\n      for (let color of Object.keys(bankCoinsSelectable)) {\r\n        bankCoinsSelectable[color] = tempCoins[color] === 0;\r\n      }\r\n    }\r\n    this.setState({\r\n      bankCoins: bankCoins,\r\n      tempCoins: tempCoins,\r\n      numTempCoins: numTempCoins,\r\n      bankCoinsSelectable: bankCoinsSelectable,\r\n    });\r\n  }\r\n  \r\n  handleConfirm(coins) {\r\n    this.setState({tempCoins: new Wallet(), open: false});  // reset temp coins\r\n    this.state.handleCollectCoins(coins);\r\n  }\r\n  \r\n  handleCancel() {\r\n    let bankCoins = Object.assign({}, this.state.bankCoins);\r\n    let tempCoins = Object.assign({}, this.state.tempCoins);\r\n    for (let color of Object.keys(tempCoins)) {\r\n      bankCoins[color] += tempCoins[color];\r\n      tempCoins[color] = 0;\r\n    }\r\n    this.setState({\r\n      bankCoins: bankCoins,\r\n      tempCoins: tempCoins,\r\n      numTempCoins: 0,\r\n      open: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const open = this.state.open;\r\n    const coins = Object.entries(this.state.bankCoins).map(([color, count], idx) => {\r\n      const disabled = !this.state.bankCoinsSelectable[color];\r\n      const bankCoinButton = <Coin color={color} content={count} disabled={disabled} onClick={this.handleCoinTake}/>;\r\n      const tempCoinButton = <Coin color={color} content={this.state.tempCoins[color]} onClick={this.handleCoinReturn}/>;\r\n      return color !== WILD ? (\r\n        <Grid.Row>\r\n          {bankCoinButton}\r\n          {this.state.tempCoins[color] > 0 && tempCoinButton}\r\n        </Grid.Row>\r\n      ) : (\r\n        <></>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Modal\r\n        className=\"bank\"\r\n        onClose={() => this.handleCancel()}\r\n        onOpen={() => this.onOpenModal()}\r\n        open={open}\r\n        trigger={<Button>Collect Coins</Button>}\r\n      >\r\n        <Modal.Header>Select Coins</Modal.Header>\r\n        <Modal.Content>{coins}</Modal.Content>\r\n        <Modal.Actions>\r\n          <Button \r\n            color='black'\r\n            content=\"Cancel\"\r\n            onClick={() => this.handleCancel()}\r\n          />\r\n          <Button\r\n            content=\"confirm\"\r\n            onClick={() => this.handleConfirm(this.state.tempCoins)}\r\n            positive\r\n            disabled={this.state.numTempCoins === 0}\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Grid, Modal } from 'semantic-ui-react';\r\nimport { Price } from './cards';\r\nimport renderPrice from './utils'\r\n\r\nvar VP = 3;\r\n\r\n// var nobles = [\r\n//   [VP, 3, 3, 3, 0, 0],\r\n//   [VP, 0, 3, 3, 3, 0],\r\n//   [VP, 0, 0, 3, 3, 3],\r\n//   [VP, 3, 0, 0, 3, 3],\r\n//   [VP, 3, 3, 0, 0, 3],\r\n//   [VP, 4, 4, 0, 0, 0],\r\n//   [VP, 0, 4, 4, 0, 0],\r\n//   [VP, 0, 0, 4, 4, 0],\r\n//   [VP, 0, 0, 0, 4, 4],\r\n//   [VP, 4, 0, 0, 0, 4]\r\n// ];\r\nvar nobles = [\r\n  [VP, 1, 0, 0, 0, 0],\r\n  [VP, 0, 1, 0, 0, 0],\r\n  [VP, 0, 0, 1, 0, 0],\r\n  [VP, 0, 0, 0, 1, 0],\r\n  [VP, 0, 0, 0, 0, 1],\r\n  [VP, 1, 0, 0, 0, 0],\r\n  [VP, 0, 1, 0, 0, 0],\r\n  [VP, 0, 0, 1, 0, 0],\r\n  [VP, 0, 0, 0, 1, 0],\r\n  [VP, 0, 0, 0, 0, 1],\r\n];\r\n\r\nclass NobleBase {\r\n  constructor(points, white, blue, green, red, black, isDisplayed) {\r\n    this.points = points;\r\n    this.price = new Price(white, blue, green, red, black);\r\n    this.isDisplayed = isDisplayed;\r\n  }\r\n}\r\n\r\nexport const allNoblemen = nobles.map(([points, white, blue, green, red, black]) => new NobleBase(points, white, blue, green, red, black, true));\r\n\r\nfunction Noble(props) {\r\n  const isDisplayed = props.isDisplayed;\r\n  const selectable = props.selectable ? \"selectable\" : \"\";\r\n  const classNames = [\"noble\", selectable].join(\" \");\r\n  return isDisplayed ? (\r\n    <div className={classNames}>\r\n      <Grid.Row>\r\n        VP: {props.points}\r\n      </Grid.Row>\r\n      {renderPrice(props.price, \"game-card\")}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n\r\nexport default class Noblemen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    const noblemen = this.props.noblemen.map(noble => {\r\n      return (\r\n        <Grid.Column>\r\n          <Noble\r\n            points={noble.points}\r\n            price={noble.price}\r\n            isDisplayed={noble.isDisplayed}\r\n          />\r\n        </Grid.Column>\r\n      );\r\n    });\r\n    \r\n    return (\r\n      <Grid columns={this.props.noblemen.length}>\r\n        {noblemen}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport class ModalNoblemen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: props.open,\r\n    };\r\n  }\r\n\r\n  handleConfirm(nobleIndex) {\r\n    this.setState({open: false});\r\n    this.props.handleNoblemenSelection(nobleIndex);\r\n  }\r\n\r\n  handleSelect(index) {\r\n    this.setState({selectedNoble: index});\r\n  }\r\n\r\n  render() {\r\n    // noblemen only contains the ones you're qualified to select\r\n    const noblemen = this.props.selectableNoblemen.map((selectable, idx) => {\r\n      const noble = this.props.noblemen[idx];\r\n      return selectable ? (\r\n        <Grid.Column onClick={() => this.handleConfirm(idx)}>\r\n          <Noble\r\n            points={noble.points}\r\n            price={noble.price}\r\n            isDisplayed={noble.isDisplayed}\r\n            selectable\r\n          />\r\n        </Grid.Column>\r\n      ) : (\r\n        <Grid.Column></Grid.Column>\r\n      )\r\n    });\r\n    \r\n    return (\r\n      <Modal open={this.props.open}>\r\n        <Modal.Header>Select Noble</Modal.Header>\r\n        <Modal.Content>\r\n          <Grid columns={noblemen.length}>\r\n            {noblemen}\r\n          </Grid>\r\n        </Modal.Content>\r\n      </Modal>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Button, Grid, Modal } from 'semantic-ui-react'\r\nimport CardModal from './cardModal';\r\nimport renderPrice, { Coin, GameCard, RESERVED } from './utils';\r\nimport Wallet from './wallet';\r\n\r\nexport default class Player extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const coins = Object.entries(this.props.coins).map(([color, count], idx) => {\r\n      const coin = <Coin color={color} content={count} />;\r\n      return <Grid.Column>{0 < count && coin}</Grid.Column>;\r\n    });\r\n    const cards = Object.entries(this.props.cards).map(([color, cardArray]) => {\r\n      const card = <GameCard color={color} content={cardArray.length} />;\r\n      return <Grid.Column>{0 < cardArray.length && card}</Grid.Column>;\r\n    });\r\n    const activePlayer = this.props.activePlayer && !this.props.finished ? \"active\" : null;\r\n    return (\r\n      <Grid className={activePlayer}>\r\n        <Grid.Row columns={2}>\r\n          <Grid.Column>{this.props.points}</Grid.Column>\r\n          <Grid.Column textAlign=\"right\">{this.props.name}</Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row columns={6}>\r\n          {coins}\r\n        </Grid.Row>\r\n        <Grid.Row columns={6}>\r\n          {cards}\r\n          <Grid.Column>\r\n            <ModalPlayerDetails {...this.props} />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nclass ModalPlayerDetails extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n    };\r\n  }\r\n\r\n  setOpen(open) {\r\n    if (!this.props.finished) {\r\n      this.setState({open: open});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const open = this.state.open;\r\n    const name = this.props.name;\r\n    const cards = Object.entries(this.props.cards).map(([color, cardArray]) => {\r\n      const cardArrayFormatted = Object.values(cardArray).map(card => {\r\n        return (\r\n          <Grid.Row>\r\n            <GameCard size=\"small\" color={card.color} content={renderPrice(card.price, \"coin\")} />\r\n          </Grid.Row>\r\n        );\r\n      });\r\n      return (\r\n        <Grid.Column>\r\n          {cardArrayFormatted}\r\n        </Grid.Column>\r\n      );\r\n    });\r\n    const reserved = this.props.reserved.map((card, idx) => {\r\n      return (\r\n        <Grid.Row>\r\n          <CardModal \r\n            source={RESERVED}\r\n            index={idx}\r\n            card={card}\r\n            playerWallet={this.props.coins}\r\n            playerCards={this.props.cards}\r\n            handleBuy={this.props.handleBuy}\r\n          />\r\n        </Grid.Row>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <Modal\r\n        onClose={() => this.setOpen(false)}\r\n        onOpen={() => this.setOpen(true)}\r\n        open={open}\r\n        trigger={<div className=\"game-card mini selectable\">...</div>}\r\n        // trigger={<div>...</div>}\r\n        // using divs, even an empty div, will work as a modal trigger. But the below GameCard component doesn't work.\r\n        // Semantic-UI calls react.isValidElement() on the trigger. If it isn't a valid element, it returns null and does nothing\r\n        // that's why using GameCard doesn't work? it's still returning a div... anyway.\r\n        // https://reactjs.org/docs/react-api.html#isvalidelement\r\n        // https://github.com/Semantic-Org/Semantic-UI-React/blob/ff703557a3090ea281cb7a263bc486a978fbabdd/src/modules/Modal/Modal.js#L215\r\n        // trigger={<GameCard color=\"wild\" selectable content=\"...\" />}\r\n      >\r\n        <Modal.Header>\r\n          <Grid columns={2}>\r\n            <Grid.Column>{this.props.points}</Grid.Column>\r\n            <Grid.Column textAlign=\"right\">{name}</Grid.Column>\r\n          </Grid>\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n          <Grid columns={6}>\r\n            {cards}\r\n            <Grid.Column>\r\n              {reserved}\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button \r\n            color='black'\r\n            content=\"Cancel\"\r\n            onClick={() => this.setOpen(false)}\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nclass PurchasedCards {\r\n  constructor() {\r\n    this.white = [];\r\n    this.blue = [];\r\n    this.green = [];\r\n    this.red = [];\r\n    this.black = [];\r\n  }\r\n}\r\n\r\nexport class PlayerBase {\r\n  constructor(name, position) {\r\n    this.coins = new Wallet();\r\n    this.cards = new PurchasedCards();\r\n    this.reserved = [];\r\n    this.points = 0;\r\n    this.noblemen = [];\r\n    this.name = name;\r\n    this.position = position;\r\n  }\r\n\r\n  reserve(card) {\r\n    this.reserved.push(card);\r\n  }\r\n\r\n  addNoble(noble) {\r\n    this.noblemen.push(noble);\r\n  }\r\n\r\n  addPoints(points) {\r\n    this.points += points;\r\n  }\r\n}","import React from 'react';\r\nimport Wallet from './wallet';\r\nimport { Coin } from './utils';\r\nimport { Button, Grid, Modal } from 'semantic-ui-react';\r\n\r\nexport default class ReturnCoinsModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCoinTake = this.handleCoinTake.bind(this);\r\n    this.handleCoinReturn = this.handleCoinReturn.bind(this);\r\n    this.state = {\r\n      open: false,\r\n      playerCoins: props.coins,\r\n      numPlayerCoins: props.coins.sum(),\r\n      tempCoins: new Wallet(),\r\n      refreshState: true,\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (!this.props.finished && this.props.open && this.state.refreshState) {\r\n      this.setState({\r\n        playerCoins: this.props.coins,\r\n        numPlayerCoins: this.props.coins.sum(),\r\n        tempCoins: new Wallet(),\r\n        refreshState: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  setAllObjValues(obj, value) {\r\n    for (let key of Object.keys(obj)) {\r\n      obj[key] = value;\r\n    }\r\n  }\r\n\r\n  handleCoinTake(colorToTake) {\r\n    let playerCoins = Object.assign({}, this.state.playerCoins);\r\n    let tempCoins = Object.assign({}, this.state.tempCoins);\r\n    playerCoins[colorToTake]--;\r\n    tempCoins[colorToTake]++;\r\n    this.setState({\r\n      playerCoins: playerCoins,\r\n      tempCoins: tempCoins,\r\n      numPlayerCoins: this.state.numPlayerCoins - 1,\r\n    });\r\n  }\r\n\r\n  handleCoinReturn(colorToReturn) {\r\n    let playerCoins = Object.assign({}, this.state.playerCoins);\r\n    let tempCoins = Object.assign({}, this.state.tempCoins);\r\n    playerCoins[colorToReturn]++;\r\n    tempCoins[colorToReturn]--;\r\n    this.setState({\r\n      playerCoins: playerCoins,\r\n      tempCoins: tempCoins,\r\n      numPlayerCoins: this.state.numPlayerCoins + 1,\r\n    });\r\n  }\r\n  \r\n  handleConfirm(coins) {\r\n    this.setState({\r\n      tempCoins: new Wallet(),\r\n      open: false,\r\n      refreshState: true,\r\n    });  // reset temp coins\r\n    this.props.handleReturnCoins(coins);\r\n  }\r\n\r\n  render() {\r\n    let open = this.props.open;\r\n    \r\n    const coins = Object.entries(this.state.playerCoins).map(([color, count], idx) => {\r\n      const disabled = count <= 0;\r\n      const playerCoinButton = <Coin color={color} content={count} disabled={disabled} onClick={this.handleCoinTake}/>;\r\n      const tempCoinButton = <Coin color={color} content={this.state.tempCoins[color]} onClick={this.handleCoinReturn}/>;\r\n      return (\r\n        <Grid.Row>\r\n          {playerCoinButton}\r\n          {this.state.tempCoins[color] > 0 && tempCoinButton}\r\n        </Grid.Row>\r\n      );\r\n    });\r\n    \r\n    return (\r\n      <Modal\r\n        className=\"bank\"\r\n        onClose={() => alert(\"you must return down to 10 coins\")}\r\n        onOpen={() => alert(\"modal opened\")}\r\n        open={open}\r\n        trigger={null}\r\n      >\r\n        <Modal.Header>Return down to 10 coins</Modal.Header>\r\n        <Modal.Content>{coins}</Modal.Content>\r\n        <Modal.Actions>\r\n          <Button\r\n            content=\"confirm\"\r\n            onClick={() => this.handleConfirm(this.state.tempCoins)}\r\n            positive\r\n            disabled={10 < this.state.numPlayerCoins}\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport decks from './cards';\r\nimport Board from './board';\r\nimport Bank from './bank';\r\nimport { allNoblemen } from './noblemen';\r\nimport Noblemen, { ModalNoblemen } from './noblemen';\r\nimport Player, { PlayerBase } from './player';\r\nimport Wallet from './wallet';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Grid, Card } from 'semantic-ui-react';\r\nimport ReturnCoinsModal from './returnCoinsModal';\r\nimport { calculateCharge, shuffle, WILD, DECK, BOARD, RESERVED } from './utils';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCollectCoins = this.handleCollectCoins.bind(this);\r\n    this.handleReturnCoins = this.handleReturnCoins.bind(this);\r\n    this.handleBuy = this.handleBuy.bind(this);\r\n    this.handleReserve = this.handleReserve.bind(this);\r\n    this.handleNoblemenSelection = this.handleNoblemenSelection.bind(this);\r\n    let shuffledDecks = [\r\n      shuffle(decks[0]),\r\n      shuffle(decks[1]),\r\n      shuffle(decks[2]),\r\n    ];\r\n    let cards = this.initCards(shuffledDecks);\r\n    const maxCoins = {\r\n      2:4,  // in 2 player game, bank carries max 4 coins per color\r\n      3:5,\r\n      4:7,\r\n    };\r\n    \r\n    this.state = {\r\n      history: [{\r\n        cards: [Array(4), Array(4), Array(4)],\r\n        players: this.initPlayers(props.numPlayers),\r\n      }],\r\n      players: this.initPlayers(props.numPlayers),\r\n      currentPlayerIdx: 0,\r\n      bankCoins: new Wallet(maxCoins[props.numPlayers]),\r\n      returnCoinsModalOpen: false,\r\n      stepNumber: 0,\r\n      moveHistory: [null],\r\n      historyReversed: false,\r\n      cards: cards,\r\n      decks: shuffledDecks,\r\n      noblemen: this.initNoblemen(props.numPlayers),\r\n      noblemenSelectionOpen: false,\r\n      selectableNoblemen: [],\r\n      numPlayers: props.numPlayers,\r\n      pointsToWin: props.pointsToWin,\r\n      maxReserve: 3,\r\n      finished: false,\r\n    };\r\n  }\r\n\r\n  initPlayers(numPlayers) {\r\n    let players = Array(numPlayers);\r\n    for (let i=0; i < numPlayers; i++) {\r\n      players[i] = new PlayerBase(\"player\" + i, i);\r\n    }\r\n    return players;\r\n  }\r\n\r\n  initCards(decks) {\r\n    let cards = Array(3);\r\n    for (let i=0; i < cards.length; i++) {\r\n      let row = Array(4);\r\n      for (let j=0; j < row.length; j++) {\r\n        row[j] = decks[i].pop();\r\n      }\r\n      cards[i] = row;\r\n    }\r\n    return cards;\r\n  }\r\n\r\n  initNoblemen(numPlayers) {\r\n    return shuffle(allNoblemen).slice(0, numPlayers + 1);\r\n  }\r\n\r\n  handleCollectCoins(coins) {\r\n    let players = this.state.players.slice(0, this.state.numPlayers + 1);\r\n    let bankCoins = Object.assign({}, this.state.bankCoins);\r\n    let playerCoins = players[this.state.currentPlayerIdx].coins;\r\n    for (let color of Object.keys(coins)) {\r\n      bankCoins[color] -= coins[color];\r\n      playerCoins[color] += coins[color];\r\n    }\r\n    if (10 < playerCoins.sum()) {\r\n      // trigger modal\r\n      this.setState({\r\n        players: players,\r\n        bankCoins: bankCoins,\r\n        returnCoinsModalOpen: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        players: players,\r\n        bankCoins: bankCoins,\r\n      });\r\n      this.handleEndTurn();\r\n    }\r\n  }\r\n\r\n  handleReturnCoins(coins) {\r\n    let players = this.state.players.slice(0, this.state.numPlayers + 1);\r\n    let bankCoins = Object.assign({}, this.state.bankCoins);\r\n    let playerCoins = players[this.state.currentPlayerIdx].coins;\r\n    for (let color of Object.keys(coins)) {\r\n      bankCoins[color] += coins[color];\r\n      playerCoins[color] -= coins[color];\r\n    }\r\n    this.setState({\r\n      players: players,\r\n      bankCoins: bankCoins,\r\n      returnCoinsModalOpen: false,\r\n    });\r\n    this.handleEndTurn();\r\n  }\r\n\r\n  handleBuy(source, level, column, index, card) {\r\n    // todo upgrade: add sidebar where you can choose which coins to spend\r\n    // todo BUG when you have consecutive handlebuy actions, sometimes the bankcoins go negative\r\n    let players = this.state.players.slice(0, this.state.numPlayers + 1);\r\n    let player = players[this.state.currentPlayerIdx];\r\n    let playerWallet = player.coins;\r\n    let playerCards = player.cards;\r\n    let bankCoins = Object.assign({}, this.state.bankCoins);\r\n    let { insufficientFunds, charge } = calculateCharge(card.price, playerWallet, playerCards);\r\n    if (insufficientFunds) {\r\n      alert(\"Insufficient Funds\");\r\n      return;\r\n    }\r\n    // remove coins from player wallet and put coins back into bank\r\n    for (let [color, price] of Object.entries(charge)) {\r\n      playerWallet[color] -= price;\r\n      bankCoins[color] += price;\r\n    }\r\n    // add card and points to player\r\n    playerCards[card.color].push(card);\r\n    player.addPoints(card.points);\r\n    // replace card on the board\r\n    // TODO don't replace if there remaining deck is 0\r\n    // TODO after buying from reserved, close all modals\r\n    let cards = this.state.cards.slice();\r\n    let decks = this.state.decks.slice();\r\n    if (source === BOARD) {\r\n      cards[level][column] = 0 < decks[level].length ? decks[level].pop() : null;\r\n    } else if (source === RESERVED) {\r\n      player.reserved.splice(index, 1);\r\n    }\r\n    this.setState({\r\n      players: players,\r\n      bankCoins: bankCoins,\r\n      cards: cards,\r\n      decks: decks,\r\n    })\r\n    this.handleEndTurn();\r\n  }\r\n\r\n  handleReserve(source, level, column, card) {\r\n    let players = this.state.players.slice(0, this.state.numPlayers + 1);\r\n    let player = players[this.state.currentPlayerIdx];\r\n    let reserved = player.reserved;\r\n    let bankCoins = Object.assign({}, this.state.bankCoins);\r\n    if (this.state.maxReserve <= reserved.length) {\r\n      alert(\"exceeds max allow reservations\");\r\n      return;\r\n    }\r\n    if (card === null) {\r\n      return;\r\n    }\r\n    player.reserve(card);\r\n    if (0 < bankCoins[WILD]) {\r\n      player.coins[WILD]++;\r\n      bankCoins[WILD]--;\r\n    }\r\n    // replace card on the board\r\n    // TODO if source is top of deck don't replace\r\n    let decks = this.state.decks.slice();  \r\n    let cards = this.state.cards.slice();\r\n    if (source === DECK) {\r\n      decks[level].pop();\r\n    } else {\r\n      cards[level][column] = decks[level].pop();\r\n    }\r\n    this.setState({\r\n      players: players,\r\n      bankCoins: bankCoins,\r\n      cards: cards,\r\n      decks: decks,\r\n    });\r\n    if (10 < player.coins.sum()) {\r\n      // trigger modal\r\n      this.setState({ returnCoinsModalOpen: true });\r\n    } else {\r\n      this.handleEndTurn();\r\n    }\r\n  }\r\n\r\n  rank(players) {\r\n    return players.slice().sort((a, b) => b.points - a.points);\r\n  }\r\n\r\n  calculateWinner(playersRanked) {\r\n    return this.state.pointsToWin <= playersRanked[0].points ? playersRanked[0] : null;\r\n  }\r\n\r\n  declareWinner(playersRanked) {\r\n    let msg = playersRanked.map((player, idx) => {\r\n      return `\\n${idx+1}. ${player.name} ${player.points}`;\r\n    })\r\n    alert(\"Winner: \\n\" + msg);\r\n  }\r\n\r\n  displayRank(playersRanked) {\r\n    return playersRanked.map((player, idx) => `\\n${idx+1}. ${player.name} : ${player.points}`);\r\n  }\r\n\r\n  listSelectableNoblemen(player, noblemen) {\r\n    let selectableNoblemen = noblemen.map(noble => {\r\n      if (!noble.isDisplayed) {\r\n        return false;\r\n      } else {\r\n        for (let color of Object.keys(noble.price)) {\r\n          if (player.cards[color].length < noble.price[color]) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n\r\n    return selectableNoblemen;\r\n  }\r\n\r\n  handleNoblemenSelection(nobleIndex) {\r\n    // player adds noblemen\r\n    // after picking up noblemen, replace with stub so the placement is still the same\r\n    const { currentPlayerIdx, numPlayers } = this.state;\r\n    let players = this.state.players.slice();\r\n    let player = players[currentPlayerIdx];\r\n    let noblemen = this.state.noblemen.slice();\r\n    let noble = noblemen[nobleIndex];\r\n    noble.isDisplayed = false;\r\n    player.addNoble(noble);\r\n    player.addPoints(noble.points);\r\n    this.setState({\r\n      players: players,\r\n      noblemen: noblemen,\r\n      selectableNoblemen: [],\r\n      noblemenSelectionOpen: false,\r\n    });\r\n    this.handleWinner(players, currentPlayerIdx, numPlayers);\r\n    this.handleNextTurn(currentPlayerIdx, numPlayers);\r\n  }\r\n\r\n  handleWinner(players, currentPlayerIdx, numPlayers) {\r\n    if (currentPlayerIdx + 1 === numPlayers) {  // check for winner at end of round\r\n      const playersRanked = this.rank(players);\r\n      const winner = this.calculateWinner(playersRanked);\r\n      if (winner) {\r\n        this.setState({ finished: true });\r\n        alert(this.displayRank(playersRanked));\r\n      }\r\n    }\r\n  }\r\n\r\n  handleNextTurn(currentPlayerIdx, numPlayers) {\r\n    if (!this.state.finished) { // next player if game not finished\r\n      this.setState({ currentPlayerIdx: (currentPlayerIdx + 1) % numPlayers });\r\n    }\r\n  }\r\n  \r\n  any(array) {\r\n    for (let each of array) {\r\n      if (each === true) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleEndTurn() {\r\n    // qualify for nobleman?\r\n    // toggle modal open -> let modal handle real end turn\r\n    // no -> real end turn\r\n    const { players, noblemen, currentPlayerIdx, numPlayers } = this.state;\r\n    const player = players[currentPlayerIdx];\r\n    // TODO: BUG: if you qualify for 1 nobleman, you don't need to invest further to get the second... \r\n    // might only be a problem now because noblement aren't unique.\r\n    const selectableNoblemen = this.listSelectableNoblemen(player, noblemen);\r\n    if (this.any(selectableNoblemen)) {\r\n      this.setState({\r\n        noblemenSelectionOpen: true,\r\n        selectableNoblemen: selectableNoblemen,\r\n      });\r\n    } else {\r\n      this.setState({ selectableNoblemen: [] });\r\n      this.handleWinner(players, currentPlayerIdx, numPlayers);\r\n      this.handleNextTurn(currentPlayerIdx, numPlayers);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { history, moveHistory, cards, decks, noblemen, noblemenSelectionOpen, selectableNoblemen, currentPlayerIdx, numPlayers, finished } = this.state;\r\n    const current = history[this.state.stepNumber];\r\n    const players = Object.values(this.state.players).map((player) => {\r\n      return (\r\n        <Player \r\n          {...player}\r\n          activePlayer={player.position === currentPlayerIdx}\r\n          finished={finished}\r\n          handleBuy={this.handleBuy}\r\n        />\r\n      );\r\n    });\r\n    let status;\r\n    if (finished) {  // check for winner at end of round\r\n      const playersRanked = this.rank(this.state.players);\r\n      status = \"Game Over:\\n\" + this.displayRank(playersRanked);\r\n    } else {\r\n      status = \"Next player: \" + this.state.players[currentPlayerIdx].name;\r\n    }\r\n\r\n    let moves = history.map((step, move) => { //move is the index\r\n      const col = moveHistory[move] % 3;\r\n      const row = Math.floor(moveHistory[move] / 3);\r\n      const desc = move ?\r\n        \"Go to move #\" + move + \" (\" + col + \", \" + row + \")\" :\r\n        \"Go to game start\";\r\n      return (\r\n        <li key={move}>\r\n          <button \r\n            className={(move === this.state.stepNumber) ? \"bold\" : \"\"}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Grid padded={true}>\r\n          <Grid.Column width={4} className=\"game-players\">\r\n            {players}\r\n          </Grid.Column>\r\n          <Grid.Column width={1} className=\"game-bank\">\r\n            <Bank \r\n              coins={this.state.bankCoins}\r\n              handleCollectCoins={this.handleCollectCoins}\r\n              finished={finished}\r\n            />\r\n            <ReturnCoinsModal\r\n              coins={this.state.players[currentPlayerIdx].coins}\r\n              open={this.state.returnCoinsModalOpen}\r\n              handleReturnCoins={this.handleReturnCoins}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={6} className=\"game-board\">\r\n            <Grid.Row>\r\n              <Noblemen noblemen={noblemen}/>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <ModalNoblemen\r\n                noblemen={noblemen}\r\n                selectableNoblemen={selectableNoblemen}\r\n                handleNoblemenSelection={this.handleNoblemenSelection}\r\n                open={noblemenSelectionOpen}\r\n              />\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Board \r\n                cards={cards}\r\n                decks={decks}\r\n                playerWallet={this.state.players[currentPlayerIdx].coins}\r\n                playerCards={this.state.players[currentPlayerIdx].cards}\r\n                handleBuy={this.handleBuy}\r\n                handleReserve={this.handleReserve}\r\n                finished={finished}\r\n              />\r\n            </Grid.Row>\r\n          </Grid.Column>\r\n          <Grid.Column width={1} className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </Grid.Column>\r\n      </Grid>\r\n    ); // is the entire ordered list of moves getting re-rendered? or only what has changed?\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game numPlayers={2} pointsToWin={3} />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}